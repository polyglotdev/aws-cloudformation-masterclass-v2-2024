AWSTemplateFormatVersion: 2010-09-09
Description: Template to empty and delete an S3 bucket

Resources:
  S3BucketDeletionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3BucketDeletionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::dom-hallan-udemy-cf-course-ac6fe543-42ce-4233-95b6-266fc7103c9f
                  - !Sub arn:aws:s3:::dom-hallan-udemy-cf-course-ac6fe543-42ce-4233-95b6-266fc7103c9f/*
              - Effect: Allow
                Action: s3:DeleteBucket
                Resource: !Sub arn:aws:s3:::dom-hallan-udemy-cf-course-ac6fe543-42ce-4233-95b6-266fc7103c9f

  BucketDeletionLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              bucket = 'dom-hallan-udemy-cf-course-ac6fe543-42ce-4233-95b6-266fc7103c9f'

              if event['RequestType'] == 'Delete':
                  # Delete all objects in the bucket
                  response = s3.list_objects_v2(Bucket=bucket)
                  while response.get('Contents', []):
                      s3.delete_objects(
                          Bucket=bucket,
                          Delete={
                              'Objects': [{'Key': obj['Key']} for obj in response['Contents']]
                          }
                      )
                      response = s3.list_objects_v2(Bucket=bucket)

                  # Delete the bucket
                  s3.delete_bucket(Bucket=bucket)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt S3BucketDeletionLambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 120

  S3BucketDeletionCustomResource:
    Type: Custom::S3BucketDeletion
    Properties:
      ServiceToken: !GetAtt BucketDeletionLambdaFunction.Arn
